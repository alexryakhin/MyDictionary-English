rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isDictionaryOwner(dictionaryId) {
      return get(/databases/$(database)/documents/dictionaries/$(dictionaryId)).data.owner == request.auth.uid;
    }
    
    function isDictionaryEditor(dictionaryId) {
      let dictionary = get(/databases/$(database)/documents/dictionaries/$(dictionaryId));
      return dictionary.data.owner == request.auth.uid ||
             (request.auth.token.email != null && 
              get(/databases/$(database)/documents/dictionaries/$(dictionaryId)/collaborators/$(request.auth.token.email)).data.role == 'editor');
    }
    
    function isDictionaryCollaborator(dictionaryId) {
      return request.auth.token.email != null && 
             exists(/databases/$(database)/documents/dictionaries/$(dictionaryId)/collaborators/$(request.auth.token.email));
    }
    
    // User profile rules - allow reading/writing user documents by email
    match /users/{email} {
      allow read, write: if isSignedIn() && request.auth.token.email == email;
    }
    
    // Device tokens subcollection - users can manage their own device tokens
    match /users/{email}/devices/{deviceId} {
      allow read, write: if isSignedIn() && request.auth.token.email == email;
    }
    
    // Private dictionary rules - use email for words collection
    // Only users with same email can access their own words
    match /users/{email}/words/{wordId} {
      allow read, write: if isSignedIn() && 
        request.auth.token.email == email;
    }
    
    // Shared dictionary rules
    match /dictionaries/{dictionaryId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isDictionaryOwner(dictionaryId);
      allow delete: if isSignedIn() && isDictionaryOwner(dictionaryId);

      // Words subcollection
      match /words/{wordId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && isDictionaryEditor(dictionaryId);
        allow update: if isSignedIn() && isDictionaryCollaborator(dictionaryId) && 
          // Allow viewers to update likes and difficulties (check if these fields are being updated)
          (request.resource.data.likes != null || request.resource.data.difficulties != null ||
           // Or allow editors to update any field
           isDictionaryEditor(dictionaryId));
        allow delete: if isSignedIn() && isDictionaryEditor(dictionaryId);
      }
      
      // Collaborators subcollection
      match /collaborators/{collaboratorEmail} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && isDictionaryOwner(dictionaryId);
        allow update: if isSignedIn() && isDictionaryOwner(dictionaryId);
        allow delete: if isSignedIn() && (
          isDictionaryOwner(dictionaryId) || 
          (isDictionaryCollaborator(dictionaryId) && request.auth.token.email == collaboratorEmail)
        );
      }
    }
    
    // Allow listing dictionaries - users can list all dictionaries
    // Individual document access is still controlled by the document rules
    match /dictionaries {
      allow list: if isSignedIn();
    }
    

    
    // Test collection for debugging
    match /test/{document=**} {
      allow read, write: if isSignedIn();
    }
  }
} 